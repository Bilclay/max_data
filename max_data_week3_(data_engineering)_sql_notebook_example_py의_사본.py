# -*- coding: utf-8 -*-
"""Max_data_week3_(Data Engineering) SQL Notebook Example.py의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PXPBOlftrKHv3wkQZPOGr-eRk_XVlh--

Set up Configuration
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

# Commented out IPython magic to ensure Python compatibility.
# ID와 PW를 자신의 환경에 맞게 수정
# %sql postgresql://ID:PW!1@주소

"""Example of Running a SQL:  
이후 아래 SQL에서 스키마는 자신의 스키마로 변경
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT * FROM raw_data.session_timestamp LIMIT 10

"""Example of Converting a SQL result into Pandas Dataframe"""

result = %sql SELECT * FROM raw_data.channel
df = result.DataFrame()

df.head()

"""3주차 과정 첫번째 예제 - p19 연습"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# CREATE TABLE gayoungjang.create_channel (
#    channel varchar(32) primary key
# );

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# INSERT INTO gayoungjang.create_channel VALUES ('FACEBOOK'), ('GOOGLE');

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT * FROM gayoungjang.create_channel;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# CREATE TABLE gayoungjang.session_summary AS SELECT TO_CHAR(ts, 'YYYY-MM') AS month, COUNT(DISTINCT userid)
# FROM raw_data.user_session_channel A
# JOIN raw_data.session_timestamp B ON A.sessionid = B.sessionid
# GROUP BY 1
# ORDER BY 1 DESC;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT * FROM gayoungjang.session_summary;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# DROP TABLE gayoungjang.session_summary

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# ALTER TABLE gayoungjang.create_channel RENAME channel to channelname

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# INSERT INTO gayoungjang.create_channel VALUES ('TIKTOK')

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT *
# FROM gayoungjang.create_channel

"""3주차 과정 두번째 예제 - p22 연습
LIKE is a case sensitive string match. ILIKE is a case-insensitive string match
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT COUNT(1)
# FROM raw_data.user_session_channel
# WHERE channel in ('Google','Facebook');

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT COUNT(1)
# FROM raw_data.user_session_channel
# WHERE channel like 'Google' or channel ilike 'Facebook'

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT DISTINCT channel
# FROM raw_data.user_session_channel
# WHERE channel ilike '%o%'

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT DISTINCT channel
# FROM raw_data.user_session_channel
# WHERE channel NOT ILIKE '%o%'

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# --p23 연습
# 
# SELECT LEN(channelname), UPPER(channelname), LOWER(channelname), LEFT(channelname, 4)
# FROM gayoungjang.create_channel

"""SQL 연습: session이 가장 많이 생성되는 시간대? - p27"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# select pg_timezone_names();

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT EXTRACT(HOUR FROM ts), COUNT(1)
# FROM raw_data.session_timestamp
# GROUP BY 1
# ORDER BY 2 DESC

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT EXTRACT(DOW FROM ts), COUNT(1)
# FROM raw_data.session_timestamp
# GROUP BY 1
# ORDER BY 2 DESC
# 
# -- 0 Sun, 6 Sat

"""Two New Tables in raw_data schema (1)
3. raw_data.session_transaction
4. raw_data.channel
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT *
# FROM raw_data.session_transaction
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT *
# FROM raw_data.channel
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT *
# FROM raw_data.user_session_channel
# LIMIT 10

"""SQL 연습: raw_data.channel의 채널별 사용자수 세기"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT A.channelname, count(DISTINCT B.userid)
# FROM raw_data.channel A
# LEFT JOIN raw_data.user_session_channel B ON A.channelname = B.channel
# GROUP BY 1
# ORDER BY 2 DESC

"""SQL 연습: 사용자별로 처음 채널과 마지막 채널 알아내기 - p41"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT ts, channel
# FROM raw_data.user_session_channel usc
# JOIN raw_data.session_timestamp st ON usc.sessionid = st.sessionid
# WHERE userid = 251
# ORDER BY 1

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
#  SELECT *, ROW_NUMBER() OVER (PARTITION BY userid  ORDER BY st.ts) as rnum
#  FROM raw_data.user_session_channel usc
#  JOIN raw_data.session_timestamp st ON usc.sessionid = st.sessionid
#  WHERE userid = 251

"""Assignment - 2 - Gross Revenue가 가장 큰 UserID 10개 찾기

Table
Fields
session_timestamp   - 
sessionid (string), **ts (timestamp)**

user_session_channel  - 
**userid (integer)**, sessionid (string), channel (string)

session_transaction   - 
sessionid (string), **refunded (boolean), amount (integer)**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT * 
# FROM raw_data.session_transaction
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT COUNT(1) 
# FROM raw_data.session_transaction

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT count(1)
# FROM raw_data.session_transaction
# WHERE refunded is TRUE

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT count(1)
# FROM raw_data.user_session_channel

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT 
#   sessionid,
#   CASE
#     WHEN refunded is TRUE THEN amount *(-1)
#     WHEN refunded is NOT TRUE THEN amount  
#   END gross_amount
# FROM raw_data.session_transaction
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT u.userid, SUM(amount)
# FROM raw_data.session_transaction g
# JOIN raw_data.user_session_channel u ON g.sessionid = u.sessionid
# GROUP BY 1
# ORDER BY 2
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# WITH gross AS (
#     SELECT 
#       sessionid,
#       CASE
#         WHEN refunded is TRUE THEN amount *(-1)
#         WHEN refunded is NOT TRUE THEN amount  
#       END gross_amount
#     FROM raw_data.session_transaction
# )
# SELECT u.userid, SUM(g.gross_amount)
# FROM gross g
# JOIN raw_data.user_session_channel u ON g.sessionid = u.sessionid
# GROUP BY 1
# ORDER BY 2 DESC
# LIMIT 10

"""채널별 월 매출액 테이블 만들기 

month
channel
uniqueUsers (총방문 사용자)
paidUsers (구매 사용자: refund한 경우도 판매로 고려)
conversionRate (구매사용자 / 총방문 사용자)
grossRevenue (refund 포함)
netRevenue (refund 제외)

 session_timestamp   -
sessionid (string), **ts (timestamp)**

user_session_channel    -
**userid (integer)**, sessionid (string), channel (string)

session_transaction    -
sessionid (string), **refunded (boolean), amount (integer)**

channel    -
**channelname (string)**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# --- Month info from session_timestamp
# 
# SELECT ts, EXTRACT(MONTH FROM ts) as month, sessionid
# FROM raw_data.session_timestamp
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# --- Monthly session_timestamp count
# 
# SELECT EXTRACT(MONTH FROM ts) as month, count(sessionid)
# FROM raw_data.session_timestamp
# GROUP BY 1

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# -- total unique users
# 
# SELECT count(DISTINCT userid) as uniqueUsers
# FROM raw_data.user_session_channel

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# -- total paid users
# SELECT count(DISTINCT userid) as paidUsers
# FROM raw_data.user_session_channel A
# JOIN raw_data.session_transaction B ON A.sessionid = B.sessionid

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# -- Monthly unique user count per channel
# 
# SELECT c.channelname, EXTRACT(MONTH FROM ts) as month, COUNT(DISTINCT userid) as uniqueUsers
# FROM raw_data.user_session_channel A
# LEFT JOIN raw_data.session_timestamp B ON A.sessionid = B.sessionid
# FULL JOIN raw_data.channel C ON A.channel = C.channelname
# GROUP BY 1, 2
# ORDER BY 1,2

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# -- gorssRevenue and netRevenue
# WITH gross AS (
#     SELECT 
#       sessionid,
#       CASE
#         WHEN refunded is TRUE THEN amount *(-1)
#         WHEN refunded is NOT TRUE THEN amount  
#       END gross_amount,
#       amount
#     FROM raw_data.session_transaction
# )
# SELECT EXTRACT(MONTH FROM s.ts) as month, u.userid, SUM(g.amount) as netRevenue, SUM(g.gross_amount) as grossRevenue
# FROM gross g
# JOIN raw_data.user_session_channel u ON g.sessionid = u.sessionid
# JOIN raw_data.session_timestamp s ON s.sessionid = g.sessionid
# GROUP BY 1,2
# ORDER BY 2 
# LIMIT 10

# Commented out IPython magic to ensure Python compatibility.
# %%sql 
# 
# SELECT EXTRACT(MONTH FROM ts) as month, userid, amount, refunded
# FROM raw_data.session_transaction A
# JOIN raw_data.session_timestamp B ON A.sessionid = B.sessionid
# JOIN raw_data.user_session_channel C ON A.sessionid = C.sessionid
# WHERE userid IN (40,41,45)
# --GROUP BY 1, 2

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# WITH gross AS (
#   SELECT
#     sessionid,
#     CASE
#       WHEN refunded is TRUE THEN amount *(-1)
#       WHEN refunded is NOT TRUE THEN amount
#     END gross_amount,
#     refunded,
#     amount
#   FROM
#     raw_data.session_transaction
# )
# SELECT
#   u.channel,
#   EXTRACT(
#     MONTH
#     FROM
#       s.ts
#   ) as month,
#   COUNT(DISTINCT u.userid) as uniqueUsers,
#   COUNT(CASE WHEN g.gross_amount > 0 THEN 1 END) as paidUsers,  -- User Distinct missing due to COUNTIF function
#   SUM(g.amount) as netRevenue,
#   SUM(g.gross_amount) as grossRevenue
# FROM
#   gross g
#   JOIN raw_data.user_session_channel u ON g.sessionid = u.sessionid
#   JOIN raw_data.session_timestamp s ON s.sessionid = g.sessionid
# GROUP BY
#   1,
#   2
# ORDER BY
#   2
# LIMIT
#   10;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# CREATE TABLE gayoungjang.gajang02 AS 
# SELECT
#   channelname,
#   EXTRACT(
#     MONTH
#     FROM
#       ts
#   ) as month,
#   COUNT(DISTINCT userid) as uniqueUsers,
#   COUNT(
#     CASE
#       WHEN refunded is FALSE THEN 1
#     END
#   ) as paidUsers,
#   CASE
#     
#       WHEN uniqueUsers = 0 THEN 0
#       ELSE CAST(paidUsers as FLOAT) / uniqueUsers 
#     END
#    as conversionRate,
#   SUM(amount) as netRevenue,
#   SUM(
#     amount * CASE
#       WHEN refunded is TRUE THEN -1
#       ELSE 1
#     END
#   ) as grossRevenue
# FROM
#   raw_data.user_session_channel u
#   LEFT JOIN raw_data.session_timestamp t ON u.sessionid = t.sessionid
#   LEFT JOIN raw_data.session_transaction s ON u.sessionid = s.sessionid FULL
#   JOIN raw_data.channel c ON u.channel = c.channelname
# GROUP BY
#   1,
#   2
# ORDER BY 1,2

